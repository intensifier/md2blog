// Do not edit by hand. This file was generated by json-schema-aot.

export interface PostMetadata {
    title: string;
    date: Date;
    keywords?: string[];
    description?: string;
    draft?: boolean;
}

// deno-lint-ignore no-explicit-any
export function parse(json: any): PostMetadata {
    if (json === null) {
        throw `JSON validation error at root: expected object, but encountered null`;
    } else if (typeof(json) !== "object") {
        throw `JSON validation error at root: expected object, but encountered ${typeof(json)}`;
    } else if (Array.isArray(json)) {
        throw `JSON validation error at root: expected object, but encountered an array`;
    }
    
    let jsonRequiredPropertyCount = 0;
    // deno-lint-ignore no-explicit-any
    const jsonResultObject: any = {};
    // deno-lint-ignore no-explicit-any
    for (const [jsonKey, jsonValue] of Object.entries(json as Record<string, any>)) {
        jsonResultObject[jsonKey] = (() => {
            switch (jsonKey) {
                case "title": {
                    
                    ++jsonRequiredPropertyCount;
                    if (typeof(jsonValue) !== "string") {
                        throw `JSON validation error at "title": expected string, but encountered ${typeof(jsonValue)}`;
                    }
                    return jsonValue;
                    
                }
                
                case "date": {
                    
                    ++jsonRequiredPropertyCount;
                    if (typeof(jsonValue) !== "string" && !(jsonValue instanceof Date)) {
                        throw `JSON validation error at "date": expected string or Date, but encountered ${typeof(jsonValue)}`;
                    }
                    
                    return new Date(jsonValue);
                    
                }
                
                case "keywords": {
                    
                    if (typeof(jsonValue) !== "object" || !Array.isArray(jsonValue)) {
                        throw `JSON validation error at "keywords": expected array, but encountered ${typeof(jsonValue)}`;
                    }
                    
                    return jsonValue.map(jsonValueElement => {
                        if (typeof(jsonValueElement) !== "string") {
                            throw `JSON validation error at "keywords.items": expected string, but encountered ${typeof(jsonValueElement)}`;
                        }
                        return jsonValueElement;
                        
                    })
                    
                }
                
                case "description": {
                    
                    if (typeof(jsonValue) !== "string") {
                        throw `JSON validation error at "description": expected string, but encountered ${typeof(jsonValue)}`;
                    }
                    return jsonValue;
                    
                }
                
                case "draft": {
                    
                    if (typeof(jsonValue) !== "boolean") {
                        throw `JSON validation error at "draft": expected boolean, but encountered ${typeof(jsonValue)}`;
                    }
                    
                    return jsonValue;
                    
                }
                
                
            }
        })();
    }
    
    if (jsonRequiredPropertyCount !== 2) {
        throw `JSON validation error at root: missing at least one required property from the list: [title, date]`;
    }
    return jsonResultObject;
    
}

// deno-lint-ignore no-explicit-any
export function validate(json: any) {
    parse(json);
}

