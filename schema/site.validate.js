// Do not edit by hand. This file was generated by json-schema-aot.

function validateHexColor(json) {
    if (typeof(json) !== "string") {
        throw `JSON validation error at "$defs.hexColor": expected string, but encountered ${typeof(json)}`;
    }if (!(/^#[0-9a-fA-F]{6}$/.test(json))) {
        throw `JSON validation error at "$defs.hexColor": string did not match pattern /^#[0-9a-fA-F]{6}$/: ${json}`;
    }
}

export function validate(json) {
    if (typeof(json) !== "object") {
        throw `JSON validation error at root: expected object, but encountered ${typeof(json)}`;
    } else if (Array.isArray(json)) {
        throw `JSON validation error at root: expected object, but encountered an array`;
    }
    
    let jsonRequiredPropertyCount = 0;
    for (const [jsonKey, jsonValue] of Object.entries(json)) {
        switch (jsonKey) {
            case "$schema": {
                if (typeof(jsonValue) !== "string") {
                    throw `JSON validation error at "$schema": expected string, but encountered ${typeof(jsonValue)}`;
                }
                break;
            }
            
            case "title": {
                if (typeof(jsonValue) !== "string") {
                    throw `JSON validation error at "title": expected string, but encountered ${typeof(jsonValue)}`;
                }
                ++jsonRequiredPropertyCount;
                break;
            }
            
            case "description": {
                if (typeof(jsonValue) !== "string") {
                    throw `JSON validation error at "description": expected string, but encountered ${typeof(jsonValue)}`;
                }
                break;
            }
            
            case "url": {
                if (typeof(jsonValue) !== "string") {
                    throw `JSON validation error at "url": expected string, but encountered ${typeof(jsonValue)}`;
                }
                break;
            }
            
            case "colors": {
                if (typeof(jsonValue) !== "object") {
                    throw `JSON validation error at "colors": expected object, but encountered ${typeof(jsonValue)}`;
                } else if (Array.isArray(jsonValue)) {
                    throw `JSON validation error at "colors": expected object, but encountered an array`;
                }
                
                for (const [jsonValueKey, jsonValueValue] of Object.entries(jsonValue)) {
                    switch (jsonValueKey) {
                        case "title": {
                            validateHexColor(jsonValueValue);
                            break;
                        }
                        
                        case "heading": {
                            validateHexColor(jsonValueValue);
                            break;
                        }
                        
                        case "link": {
                            validateHexColor(jsonValueValue);
                            break;
                        }
                        
                        case "comment": {
                            validateHexColor(jsonValueValue);
                            break;
                        }
                        
                        
                    }
                }
                break;
            }
            
            default: {
                throw `JSON validation error at root: encountered unexpected property: ${jsonKey}`;
            }
        }
    }
    if (jsonRequiredPropertyCount !== 1) {
        throw `JSON validation error at root: missing at least one required property from the list: [title]`;
    }
    
}

