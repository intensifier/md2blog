// Do not edit by hand. This file was generated by json-schema-aot.

export type HexColor = string;

/** Format for md2blog site metadata file (site.json). */
export interface SiteMetadata {
    /** Optional JSON schema URI (ignored by md2blog, but can be used by text editors to support contextual hints and auto-complete). */
    $schema?: string;
    /** Title for the site (displayed at the top of every page). */
    title: string;
    /** Optional (but recommended) description of the site (used in meta tags and also used as the default subtitle on all pages). */
    description?: string;
    /** Optional (but recommended) URL for the root of the site (used in Atom feed and Open Graph links). */
    url?: string;
    /** Optional object specifying colors to use on the site. Note that all colors are reused for syntax highlighting. */
    colors?: {
        /** Color used for the site title. */
        title?: HexColor;
        /** Color used for headings. */
        heading?: HexColor;
        /** Color used links. */
        link?: HexColor;
        /** Color used only for syntax highlighting (generally for comments). */
        comment?: HexColor;
    };
    /** Optional subtitle and top-level links (added to all pages). By default, the site description is used as the subtitle and links to the home page, archive, and non-post pages in the site root are shown. */
    header?: {
        /** Optional subtitle (added to all pages). By default, the site description is used as the subtitle. */
        text?: string;
        /** Optional map of top-level link names to relative paths or URLs. Use `index.html` to link to the home page and `posts/index.html` to link to the archive. By default, links to the home page, archive, and all non-post pages in the site root are shown. */
        links?: {
            [key: string]: string;
        };
    };
    /** Optional footer, e.g. for copyright notices (added to all pages). */
    footer?: {
        /** Text to be shown in the footer (e.g. copyright notice). */
        text?: string;
    };
}

// deno-lint-ignore no-explicit-any
function parseHexColor(json: any) {
    if (typeof(json) !== "string") {
        throw `JSON validation error at "$defs.hexColor": expected string, but encountered ${typeof(json)}`;
    }
    if (!(/^#[0-9a-fA-F]{6}$/.test(json))) {
        throw `JSON validation error at "$defs.hexColor": string did not match pattern /^#[0-9a-fA-F]{6}$/: ${json}`;
    }
    return json;
    
}

// deno-lint-ignore no-explicit-any
export function parse(json: any): SiteMetadata {
    if (json === null) {
        throw `JSON validation error at root: expected object, but encountered null`;
    } else if (typeof(json) !== "object") {
        throw `JSON validation error at root: expected object, but encountered ${typeof(json)}`;
    } else if (Array.isArray(json)) {
        throw `JSON validation error at root: expected object, but encountered an array`;
    }
    
    let jsonRequiredPropertyCount = 0;
    // deno-lint-ignore no-explicit-any
    const jsonResultObject: any = {};
    // deno-lint-ignore no-explicit-any
    for (const [jsonKey, jsonValue] of Object.entries(json as Record<string, any>)) {
        jsonResultObject[jsonKey] = (() => {
            switch (jsonKey) {
                case "$schema": {
                    
                    if (typeof(jsonValue) !== "string") {
                        throw `JSON validation error at "$schema": expected string, but encountered ${typeof(jsonValue)}`;
                    }
                    return jsonValue;
                    
                }
                
                case "title": {
                    
                    ++jsonRequiredPropertyCount;
                    if (typeof(jsonValue) !== "string") {
                        throw `JSON validation error at "title": expected string, but encountered ${typeof(jsonValue)}`;
                    }
                    return jsonValue;
                    
                }
                
                case "description": {
                    
                    if (typeof(jsonValue) !== "string") {
                        throw `JSON validation error at "description": expected string, but encountered ${typeof(jsonValue)}`;
                    }
                    return jsonValue;
                    
                }
                
                case "url": {
                    
                    if (typeof(jsonValue) !== "string") {
                        throw `JSON validation error at "url": expected string, but encountered ${typeof(jsonValue)}`;
                    }
                    return jsonValue;
                    
                }
                
                case "colors": {
                    
                    if (jsonValue === null) {
                        throw `JSON validation error at "colors": expected object, but encountered null`;
                    } else if (typeof(jsonValue) !== "object") {
                        throw `JSON validation error at "colors": expected object, but encountered ${typeof(jsonValue)}`;
                    } else if (Array.isArray(jsonValue)) {
                        throw `JSON validation error at "colors": expected object, but encountered an array`;
                    }
                    
                    // deno-lint-ignore no-explicit-any
                    const jsonValueResultObject: any = {};
                    // deno-lint-ignore no-explicit-any
                    for (const [jsonValueKey, jsonValueValue] of Object.entries(jsonValue as Record<string, any>)) {
                        jsonValueResultObject[jsonValueKey] = (() => {
                            switch (jsonValueKey) {
                                case "title": {
                                    
                                    return parseHexColor(jsonValueValue);
                                    
                                }
                                
                                case "heading": {
                                    
                                    return parseHexColor(jsonValueValue);
                                    
                                }
                                
                                case "link": {
                                    
                                    return parseHexColor(jsonValueValue);
                                    
                                }
                                
                                case "comment": {
                                    
                                    return parseHexColor(jsonValueValue);
                                    
                                }
                                
                                
                            }
                        })();
                    }
                    return jsonValueResultObject;
                    
                }
                
                case "header": {
                    
                    if (jsonValue === null) {
                        throw `JSON validation error at "header": expected object, but encountered null`;
                    } else if (typeof(jsonValue) !== "object") {
                        throw `JSON validation error at "header": expected object, but encountered ${typeof(jsonValue)}`;
                    } else if (Array.isArray(jsonValue)) {
                        throw `JSON validation error at "header": expected object, but encountered an array`;
                    }
                    
                    // deno-lint-ignore no-explicit-any
                    const jsonValueResultObject: any = {};
                    // deno-lint-ignore no-explicit-any
                    for (const [jsonValueKey, jsonValueValue] of Object.entries(jsonValue as Record<string, any>)) {
                        jsonValueResultObject[jsonValueKey] = (() => {
                            switch (jsonValueKey) {
                                case "text": {
                                    
                                    if (typeof(jsonValueValue) !== "string") {
                                        throw `JSON validation error at "header.text": expected string, but encountered ${typeof(jsonValueValue)}`;
                                    }
                                    return jsonValueValue;
                                    
                                }
                                
                                case "links": {
                                    
                                    if (jsonValueValue === null) {
                                        throw `JSON validation error at "header.links": expected object, but encountered null`;
                                    } else if (typeof(jsonValueValue) !== "object") {
                                        throw `JSON validation error at "header.links": expected object, but encountered ${typeof(jsonValueValue)}`;
                                    } else if (Array.isArray(jsonValueValue)) {
                                        throw `JSON validation error at "header.links": expected object, but encountered an array`;
                                    }
                                    
                                    // deno-lint-ignore no-explicit-any
                                    const jsonValueValueResultObject: any = {};
                                    // deno-lint-ignore no-explicit-any
                                    for (const [jsonValueValueKey, jsonValueValueValue] of Object.entries(jsonValueValue as Record<string, any>)) {
                                        jsonValueValueResultObject[jsonValueValueKey] = (() => {
                                            switch (jsonValueValueKey) {
                                                
                                                default: {
                                                    if (typeof(jsonValueValueValue) !== "string") {
                                                        throw `JSON validation error at "header.links.additionalProperties": expected string, but encountered ${typeof(jsonValueValueValue)}`;
                                                    }
                                                    return jsonValueValueValue;
                                                    
                                                }
                                                
                                            }
                                        })();
                                    }
                                    return jsonValueValueResultObject;
                                    
                                }
                                
                                
                            }
                        })();
                    }
                    return jsonValueResultObject;
                    
                }
                
                case "footer": {
                    
                    if (jsonValue === null) {
                        throw `JSON validation error at "footer": expected object, but encountered null`;
                    } else if (typeof(jsonValue) !== "object") {
                        throw `JSON validation error at "footer": expected object, but encountered ${typeof(jsonValue)}`;
                    } else if (Array.isArray(jsonValue)) {
                        throw `JSON validation error at "footer": expected object, but encountered an array`;
                    }
                    
                    // deno-lint-ignore no-explicit-any
                    const jsonValueResultObject: any = {};
                    // deno-lint-ignore no-explicit-any
                    for (const [jsonValueKey, jsonValueValue] of Object.entries(jsonValue as Record<string, any>)) {
                        jsonValueResultObject[jsonValueKey] = (() => {
                            switch (jsonValueKey) {
                                case "text": {
                                    
                                    if (typeof(jsonValueValue) !== "string") {
                                        throw `JSON validation error at "footer.text": expected string, but encountered ${typeof(jsonValueValue)}`;
                                    }
                                    return jsonValueValue;
                                    
                                }
                                
                                
                            }
                        })();
                    }
                    return jsonValueResultObject;
                    
                }
                
                
            }
        })();
    }
    
    if (jsonRequiredPropertyCount !== 1) {
        throw `JSON validation error at root: missing at least one required property from the list: [title]`;
    }
    return jsonResultObject;
    
}

// deno-lint-ignore no-explicit-any
export function validate(json: any) {
    parse(json);
}

